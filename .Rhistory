x <- gsub(escape_end, div_start, x, fixed = T)
x <- gsub(escape_start, div_end, x, fixed = T)
# Wrap everything in the output div start and end sequences
x <- paste0(div_start, x, div_end)
# Remove cases where there is no output between a div start and div end
x <- gsub(paste0(div_start, div_end), "", x, fixed = T)
# Return the result
x
}
parse_output(test)
# Custom hook for regular output
# output_format$knitr$knit_hooks$output <- function(x, options){
parse_output <- function(x, options){
escape_start <- labbook:::escape_start
escape_end   <- labbook:::escape_end
escape_regex <- function(x){
x <- gsub("[", "\\[", x, fixed = T)
x <- gsub("]", "\\]", x, fixed = T)
x
}
# Sequences for div start and end
div_start <- "<pre class='code-block code-output output-code'><code>"
div_end   <- "</code></pre>"
# Remove newline at end
x <- gsub("\\n$", "", x)
# Remove case where escape start immediately follows escape end
x <- gsub(paste0(escape_end, escape_start), "", x, fixed = T)
# Escape any html characters in quoted output
browser()
x <- stringr::str_replace_all(
string      = x,
pattern     = paste0(escape_regex(escape_end), ".*?", escape_regex(escape_start)),
replacement = function(s){
xhtmltools::htmlEscape(s)
}
)
# Replace escape start/end sequences with output div start/end sequences
x <- gsub(escape_end, div_start, x, fixed = T)
x <- gsub(escape_start, div_end, x, fixed = T)
# Wrap everything in the output div start and end sequences
x <- paste0(div_start, x, div_end)
# Remove cases where there is no output between a div start and div end
x <- gsub(paste0(div_start, div_end), "", x, fixed = T)
# Return the result
x
}
parse_output(test)
escape_regex(escape_end)
escape_regex(escape_start)
x
test <- paste0("<span>", labbook:::escape_end, "<div>",labbook:::escape_start, "</span>")
parse_output(test)
# Custom hook for regular output
# output_format$knitr$knit_hooks$output <- function(x, options){
parse_output <- function(x, options){
escape_start <- labbook:::escape_start
escape_end   <- labbook:::escape_end
escape_regex <- function(x){
x <- gsub("[", "\\[", x, fixed = T)
x <- gsub("]", "\\]", x, fixed = T)
x
}
# Sequences for div start and end
div_start <- "<pre class='code-block code-output output-code'><code>"
div_end   <- "</code></pre>"
# Remove newline at end
x <- gsub("\\n$", "", x)
# Remove case where escape start immediately follows escape end
x <- gsub(paste0(escape_end, escape_start), "", x, fixed = T)
# Escape any html characters in quoted output
x <- stringr::str_replace_all(
string      = x,
pattern     = paste0(escape_regex(escape_end), ".*?", escape_regex(escape_start)),
replacement = function(s){
xhtmltools::htmlEscape(s)
}
)
# Replace escape start/end sequences with output div start/end sequences
x <- gsub(escape_end, div_start, x, fixed = T)
x <- gsub(escape_start, div_end, x, fixed = T)
# Wrap everything in the output div start and end sequences
x <- paste0(div_start, x, div_end)
# Remove cases where there is no output between a div start and div end
x <- gsub(paste0(div_start, div_end), "", x, fixed = T)
# Return the result
x
}
parse_output(test)
# Custom hook for regular output
# output_format$knitr$knit_hooks$output <- function(x, options){
parse_output <- function(x, options){
escape_start <- labbook:::escape_start
escape_end   <- labbook:::escape_end
escape_regex <- function(x){
x <- gsub("[", "\\[", x, fixed = T)
x <- gsub("]", "\\]", x, fixed = T)
x
}
# Sequences for div start and end
div_start <- "<pre class='code-block code-output output-code'><code>"
div_end   <- "</code></pre>"
# Remove newline at end
x <- gsub("\\n$", "", x)
# Remove case where escape start immediately follows escape end
x <- gsub(paste0(escape_end, escape_start), "", x, fixed = T)
# Escape any html characters in quoted output
x <- stringr::str_replace_all(
string      = x,
pattern     = paste0(escape_regex(escape_end), ".*?", escape_regex(escape_start)),
replacement = function(s){
htmltools::htmlEscape(s)
}
)
# Replace escape start/end sequences with output div start/end sequences
x <- gsub(escape_end, div_start, x, fixed = T)
x <- gsub(escape_start, div_end, x, fixed = T)
# Wrap everything in the output div start and end sequences
x <- paste0(div_start, x, div_end)
# Remove cases where there is no output between a div start and div end
x <- gsub(paste0(div_start, div_end), "", x, fixed = T)
# Return the result
x
}
parse_output(test)
devtools::install()
parse_output("hi")
parse_output("<hi>")
# Custom hook for regular output
# output_format$knitr$knit_hooks$output <- function(x, options){
parse_output <- function(x, options){
# Sequences for div start and end
div_start <- "<pre class='code-block code-output output-code'><code>"
div_end   <- "</code></pre>"
# Remove newline at end
x <- gsub("\\n$", "", x)
# Remove case where escape start immediately follows escape end
x <- gsub(paste0(escape_end, escape_start), "", x, fixed = T)
# Escape any html characters in quoted output
x <- stringr::str_replace_all(
string      = x,
pattern     = "(^|\\]\\]\\]\\]).*?($|\\[\\[\\[\\[)",
replacement = function(s){
s <- gsub("[[[[", "", s, fixed = T)
s <- gsub("]]]]", "", s, fixed = T)
paste0(div_start, htmltools::htmlEscape(s), div_end)
}
)
# Remove cases where there is no output between a div start and div end
x <- gsub(paste0(div_start, div_end), "", x, fixed = T)
# Return the result
x
}
parse_output("<hi>")
# Custom hook for regular output
# output_format$knitr$knit_hooks$output <- function(x, options){
parse_output <- function(x, options){
escape_start <- labbook:::escape_start
escape_end <- labbook:::escape_end
# Sequences for div start and end
div_start <- "<pre class='code-block code-output output-code'><code>"
div_end   <- "</code></pre>"
# Remove newline at end
x <- gsub("\\n$", "", x)
# Remove case where escape start immediately follows escape end
x <- gsub(paste0(escape_end, escape_start), "", x, fixed = T)
# Escape any html characters in quoted output
x <- stringr::str_replace_all(
string      = x,
pattern     = "(^|\\]\\]\\]\\]).*?($|\\[\\[\\[\\[)",
replacement = function(s){
s <- gsub("[[[[", "", s, fixed = T)
s <- gsub("]]]]", "", s, fixed = T)
paste0(div_start, htmltools::htmlEscape(s), div_end)
}
)
# Remove cases where there is no output between a div start and div end
x <- gsub(paste0(div_start, div_end), "", x, fixed = T)
# Return the result
x
}
parse_output("<hi>")
parse_output("<hi>[[[[<div></div>]]]]<there>")
parse_output(test)
test
test <- paste0("<span>", labbook:::escape_start, "<div>",labbook:::escape_end, "</span>")
test
parse_output(test)
devtools::install()
Hmisc::escapeRegex(escape_end)
Hmisc::escapeRegex(labbook:::escape_end)
devtools::install()
system2(
command = "git",
args = c(
"-C", "/Users/samwilks/Dropbox/labbook",
"commit"
)
)
source('~/Dropbox/labbook/packages/labbook/R/git.R')
labbook.git.commit()
labbook.git.commit("test")
unstaged_files <- system2(
command = "git",
args = c(
"-C", shQuote("/Users/samwilks/Dropbox/labbook"),
"diff", "--name-only"
)
)
unstaged_files <- system2(
command = "git",
args = c(
"-C", shQuote("/Users/samwilks/Dropbox/labbook"),
"diff", "--name-only"
),
stdout = TRUE
)
unstaged_files
warning(sprintf("Changes in the following git subdirectories were not committed:\n\n'%s'", paste(unstaged_files, collapse = "'\n'")))
source('~/Dropbox/labbook/packages/labbook/R/git.R')
source('~/Dropbox/labbook/packages/labbook/R/git.R')
labbook.git.commit("test")
labbook.git.commit("test")
source('~/Dropbox/labbook/packages/labbook/R/git.R')
labbook.git.commit("test")
source('~/Dropbox/labbook/packages/labbook/R/git.R')
labbook.git.commit("test")
nchar("e4e61df5")
source('~/Dropbox/labbook/packages/labbook/R/git.R')
labbook.git.commit("test")
source('~/Dropbox/labbook/packages/labbook/R/git.R')
labbook.git.commit.history("../../projects/h3_mutants/pages/alaska_single_nuc_mutant_map.html")
source('~/Dropbox/labbook/packages/labbook/R/git.R')
labbook.git.commit.history("../../projects/h3_mutants/pages/alaska_single_nuc_mutant_map.html")
source('~/Dropbox/labbook/packages/labbook/R/git.R')
labbook.git.commit.history("../../projects/h3_mutants/pages/alaska_single_nuc_mutant_map.html")
labbook.git.commit.history("../../projects/minor_epitopes/pages/examining_mutant_sr_reactivity.html")
library(labbook)
devtools::install()
source('~/Dropbox/labbook/packages/labbook/R/sync.R')
devtools::install()
source('~/Dropbox/labbook/packages/labbook/R/sync.R')
rsync_library()
rsync_index()
grey <- crayon::make_style("grey40")
source('~/Dropbox/labbook/packages/labbook/R/sync.R')
rsync_index()
source('~/Dropbox/labbook/packages/labbook/R/sync.R')
rsync_index()
source('~/Dropbox/labbook/packages/labbook/R/sync.R')
# Sync packages
crayon::green(cat("hi"))
# Sync packages
cat(crayon::green("hi"))
cat(crayon::green(crayon::bold("Syncing packages:")))
source('~/Dropbox/labbook/packages/labbook/R/sync.R')
devtools::install()
devtools::install()
devtools::install()
devtools::install()
## Functions to sync packages
#' @export
rsync_packages <- function(){
system("/usr/local/bin/rsync -avz --delete --delete-excluded --exclude '*.DS_Store' --exclude '*.Rproj.user*' /Users/samwilks/Dropbox/labbook/packages/ samwilks@albertine.antigenic-cartography.org:/acnas/samwilks/html/ac.org/packages")
}
rsync_packages()
rsync_packages()
devtools::install()
devtools::install()
source('~/Dropbox/labbook/packages/labbook/R/packages.R')
archive_packages()
message(basename(package_path))
package_dir
package_dir <- "/acnas/samwilks/html/ac.org/packages/"
paste0("../downloads/packages/", basename(package_path), ".zip")
basename(package_path)
sprintf(
"(cd %s; zip -rq %s %s)",
package_dir,
paste0("../downloads/packages/", basename(package_path), ".zip"),
basename(package_path)
)
sprintf(
"(cd %s; zip -rq %s %s)",
shQuote(package_dir),
shQuote(paste0("../downloads/packages/", basename(package_path), ".zip")),
shQuote(basename(package_path))
)
package_paths
paste("zip rq", shQuote(paste0("../downloads/packages/", basename(package_path), ".zip")), shQuote(basename(package_path)))
paste("zip rq", shQuote(paste0("../downloads/packages/", basename(package_path), ".zip")), shQuote(basename(package_path)), ";")
paste0("zip rq ", shQuote(paste0("../downloads/packages/", basename(package_path), ".zip ")), shQuote(basename(package_path)), ";")
paste0("zip rq ", shQuote(paste0("../downloads/packages/", basename(package_path), ".zip")), " ", shQuote(basename(package_path)), ";")
paste0("zip rq ", shQuote(paste0("../downloads/packages/", basename(package_paths), ".zip")), " ", shQuote(basename(package_paths)), ";")
zip_commands <- paste0("zip rq ", shQuote(paste0("../downloads/packages/", basename(package_paths), ".zip")), " ", shQuote(basename(package_paths)), ";")
sprintf(
"(cd %s; %s)",
shQuote(package_dir),
paste(zip_commands, sep = " ")
)
sprintf(
"(cd %s; %s)",
shQuote(package_dir),
paste(zip_commands, collapse = " ")
)
zip_commands <- paste0("zip -rq ", shQuote(paste0("../downloads/packages/", basename(package_paths), ".zip")), " ", shQuote(basename(package_paths)), ";")
sprintf(
"(cd %s; %s)",
shQuote(package_dir),
paste(zip_commands, collapse = " ")
)
sprintf(
"(cd %s; %s)",
shQuote(package_dir),
paste(zip_commands, collapse = " ")
)
sprintf(
"(cd %s; %s)",
shQuote(package_dir),
paste(zip_commands, collapse = " ")
)
sprintf(
"ssh samwilks@albertine.antigenic-cartography.org (cd %s; %s)",
shQuote(package_dir),
paste(zip_commands, collapse = " ")
)
sprintf(
"ssh samwilks@albertine.antigenic-cartography.org \"(cd %s; %s)\"",
shQuote(package_dir),
paste(zip_commands, collapse = " ")
)
system(
sprintf(
"ssh samwilks@albertine.antigenic-cartography.org \"(cd %s; %s)\"",
shQuote(package_dir),
paste(zip_commands, collapse = " ")
)
)
archive_packages <- function(){
package_dir <- "/acnas/samwilks/html/ac.org/packages/"
package_paths <- list.dirs(package_dir, full.names = T, recursive = F)
zip_commands <- paste0("zip -rq ", shQuote(paste0("../downloads/packages/", basename(package_paths), ".zip")), " ", shQuote(basename(package_paths)), ";")
system(
sprintf(
"ssh samwilks@albertine.antigenic-cartography.org \"(cd %s; %s)\"",
shQuote(package_dir),
paste(zip_commands, collapse = " ")
)
)
}
source('~/Dropbox/labbook/packages/labbook/R/packages.R')
devtools::install()
archive_online_package_downloads()
source('~/Dropbox/labbook/packages/labbook/R/packages.R')
archive_online_package_downloads()
source('~/Dropbox/labbook/packages/labbook/R/documenting.R')
index_pages()
source('~/Dropbox/labbook/packages/labbook/R/documenting.R')
index_pages()
content
pageinfo$size
pageinfo$size > 1e7
source('~/Dropbox/labbook/packages/labbook/R/documenting.R')
index_pages()
content
source('~/Dropbox/labbook/packages/labbook/R/documenting.R')
index_pages()
content
source('~/Dropbox/labbook/packages/labbook/R/documenting.R')
index_pages()
source('~/Dropbox/labbook/packages/labbook/R/documenting.R')
index_pages()
source('~/Dropbox/labbook/packages/labbook/R/documenting.R')
source('~/Dropbox/labbook/packages/labbook/R/documenting.R')
devtools::install()
hexdec <- paste0(letters, 0:9)
hexdec
hexdec <- c(letters, 0:9)
hexdec
sample(hexdec, 8, replace = T)
paste(sample(hexdec, 8, replace = T), collapse = "")
paste(sample(hexdec, 8, replace = T), collapse = "")
paste(sample(hexdec, 8, replace = T), collapse = "")
paste(sample(hexdec, 8, replace = T), collapse = "")
paste(sample(hexdec, 8, replace = T), collapse = "")
paste(sample(hexdec, 8, replace = T), collapse = "")
paste(sample(hexdec, 8, replace = T), collapse = "")
paste(sample(hexdec, 8, replace = T), collapse = "")
paste(sample(hexdec, 8, replace = T), collapse = "")
paste(sample(hexdec, 8, replace = T), collapse = "")
paste(sample(hexdec, 8, replace = T), collapse = "")
paste(sample(hexdec, 8, replace = T), collapse = "")
paste(sample(hexdec, 8, replace = T), collapse = "")
paste(sample(hexdec, 8, replace = T), collapse = "")
paste(sample(hexdec, 8, replace = T), collapse = "")
paste(sample(hexdec, 8, replace = T), collapse = "")
paste(sample(hexdec, 8, replace = T), collapse = "")
paste(sample(hexdec, 8, replace = T), collapse = "")
paste(sample(hexdec, 8, replace = T), collapse = "")
paste(sample(hexdec, 8, replace = T), collapse = "")
paste(sample(hexdec, 8, replace = T), collapse = "")
paste(sample(hexdec, 8, replace = T), collapse = "")
paste(sample(hexdec, 8, replace = T), collapse = "")
paste(sample(hexdec, 8, replace = T), collapse = "")
paste(sample(hexdec, 8, replace = T), collapse = "")
paste(sample(hexdec, 8, replace = T), collapse = "")
paste(sample(hexdec, 8, replace = T), collapse = "")
paste(sample(hexdec, 8, replace = T), collapse = "")
paste(sample(hexdec, 8, replace = T), collapse = "")
devtools::install()
devtools::install()
source('~/Dropbox/labbook/packages/labbook/R/documenting.R')
index_pages()
html
html[2]
html[[2]]
xml2::xml_find_all(html, "//pre[contains(concat(' ', @class, ' '), ' page-code ')]")
# Read code
codenode <- xml2::xml_find_all(html, "//pre[contains(concat(' ', @class, ' '), ' page-code ')]")
xml2::xml_text(codenode)
content
code <- xml2::xml_text(codenode)
code
cat(code)
strsplit(xml2::xml_text(codenode), "\\n")[[1]]
source('~/Dropbox/labbook/packages/labbook/R/documenting.R')
index_pages()
index_pages()
source('~/Dropbox/labbook/packages/labbook/R/documenting.R')
index_pages()
source('~/Dropbox/labbook/packages/labbook/R/documenting.R')
index_pages()
source('~/Dropbox/labbook/packages/labbook/R/documenting.R')
index_pages()
source('~/Dropbox/labbook/packages/labbook/R/documenting.R')
index_pages()
source('~/Dropbox/labbook/packages/labbook/R/documenting.R')
index_pages()
index_pages()
index_pages()
file.exists("dev")
devtools::install()
reticulate::eng_python()
source('~/Dropbox/labbook/packages/labbook/tests/testthat/test-python-render.R')
knitr::knit_engines$get()
knitr::knit_engines$get()$python
source('~/Dropbox/labbook/packages/labbook/tests/testthat/test-python-render.R')
source('~/Dropbox/labbook/packages/labbook/tests/testthat/test-python-render.R')
source('~/Dropbox/labbook/packages/labbook/tests/testthat/test-python-render.R')
source('~/Dropbox/labbook/packages/labbook/tests/testthat/test-python-render.R')
reticulate::source_python('~/Dropbox/labbook/packages/labbook/tests/testdata/example_python_page.py')
source('~/Dropbox/labbook/packages/labbook/tests/testthat/test-python-render.R')
source('~/Dropbox/labbook/packages/labbook/tests/testthat/test-python-render.R')
source('~/Dropbox/labbook/packages/labbook/tests/testthat/test-python-render.R')
source('~/Dropbox/labbook/packages/labbook/tests/testthat/test-python-render.R')
source('~/Dropbox/labbook/packages/labbook/tests/testthat/test-python-render.R')
source('~/Dropbox/labbook/packages/labbook/tests/testthat/test-python-render.R')
devtools::install(quick = T)
devtools::install(quick = T)
labbook_dir <- system("source ~/.bash_profile; echo $LABBOOK", intern = TRUE)
labbook_dir
labbook_dir <- system("source ~/.zshenv; echo $LABBOOK", intern = TRUE)
labbook_dir
devtools::install()
devtools::install(quick = T)
cars
iris
iris$Species
grepl("^v", iris$Species)
devtools::install(quick = T)
list.dirs("~/Dropbox/labbook/projects/")
list.dirs("~/Dropbox/labbook/projects/", recursive = F)
project_dirs <- list.dirs("~/Dropbox/labbook/projects/", recursive = F)
project_dirs <- list.dirs("~/Dropbox/labbook/projects/", recursive = F)
unlist(lapply(project_dirs, function(dir){
list.files(file.path(dir, "code"), full.names = T)
}))
code_files_info <- lapply(code_files, file.info)
code_files <- unlist(lapply(project_dirs, function(dir){
list.files(file.path(dir, "code"), full.names = T)
}))
code_files_info <- lapply(code_files, file.info)
code_files_info
code_files_info[[1]]$mtime
as.Date.POSIXct(code_files_info[[1]]$mtime)
as.Date.POSIXlt(code_files_info[[1]]$mtime)
as.numeric(code_files_info[[1]]$mtime)
sapply(code_files_info, function(x){ x$mtime })
lapply(code_files_info, function(x){ x$mtime })
lapply(code_files_info, function(x){ as.character(x$mtime) })
sapply(code_files_info, function(x){ as.character(x$mtime) })
code_files_info[[1]]$uname
code_files_info[[1]]$grname
code_files_info[[1]]
names(code_files_info[[1]])
rownames(code_files_info[[1]])
code_datetimes <- sapply(code_files_info, function(x){ x$mtime })
code_times <- sapply(code_files_info, function(x){ as.character(x$mtime) })
code_paths <- sapply(code_files_info, function(x){ rownames(x) })
code_times
code_paths
basename(code_paths)
basename(dirname(dirname(code_paths)))
source('~/Dropbox/labbook/packages/labbook/R/utils.R')
labbook.list_files_by_edited()
source('~/Dropbox/labbook/packages/labbook/R/utils.R')
labbook.list_files_by_edited()
source('~/Dropbox/labbook/packages/labbook/R/utils.R')
labbook.list_files_by_edited()
source('~/Dropbox/labbook/packages/labbook/R/utils.R')
labbook.list_files_by_edited()
source('~/Dropbox/labbook/packages/labbook/R/utils.R')
labbook.list_files_by_edited()
